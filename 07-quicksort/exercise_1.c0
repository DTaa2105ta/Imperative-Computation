#use "arrayutil.c0"

int find_min(int[] A, int lo, int hi)
//@requires 0 <= lo && lo < hi && hi <= \length(A);
//@ensures lo <= \result && \result < hi;
//@ensures le_seg(A[\result], A, lo, hi);
{
  int mini = lo;
  for (int i = lo+1; i < hi; i++)
  //@loop_invariant lo < i && i <= hi;
  //@loop_invariant lo <= mini && mini < hi;
  //@loop_invariant le_seg(A[mini], A, lo, i);
  {
    if (A[i] < A[mini])
      mini = i;
  }
  return mini;
}

void selsort(int[] A, int lo, int hi)
//@requires 0 <= lo && lo <= hi && hi <= \length(A);
//@ensures is_sorted(A, lo, hi);
{
  for (int i = lo; i < hi; i++)
    //@loop_invariant lo <= i && i <= hi;
    //@loop_invariant is_sorted(A, lo, i);
    //@loop_invariant le_segs(A, lo, i, A, i, hi);
    {
      int m = find_min(A, i, hi);
      //@assert le_seg(A[m], A, i, hi);
      swap(A, i, m);
      //@assert le_seg(A[i], A, i+1, hi);
    }
  //@assert is_sorted(A, lo, hi);
}


int[] seg_copy(int[] A, int lo, int hi)
//@requires 0 <= lo && lo <= hi && hi <= \length (A);
{
    int n = hi - lo;
    int[] C = alloc_array(int, n);
    for (int i = 0; i < n; i++)
    //@loop_invariant 0 <= i && i <= n;
    //@loop_invariant lo <= lo + i && lo + i <= hi;
    {
        C[i] = A[lo + i];
    }
    return C;
}

bool array_equal(int[] A, int[] B, int n)
//@requires 0 <= n && n <= \length(A) && n <= \length(B);
{
    for (int i = 0; i < n; i++)
    //@loop_invariant 0 <= i && i <= n;
    {
        if (A[i] != B[i])
        return false;
    }
    return true;
}

bool is_permutation(int[] A, int loA, int hiA, int[] B, int loB, int hiB)
//@requires 0 <= loA && loA <= hiA && hiA <= \length (A);
//@requires 0 <= loB && loB <= hiB && hiB <= \length (B);
{
    if (hiA - loA != hiB - loB)
        return false;
    int[] Ac = seg_copy(A, loA, hiA);
    int[] Bc = seg_copy(B, loB, hiB);
    int n = hiA - loA; //@assert n == hiB - loB;
    selsort(Ac, 0, n);
    selsort(Bc, 0, n);
    return array_equal(Ac, Bc, n);
}