int find_max(int[] A, int n)
//@requires n == \length(A) && n > 0;
{
    int max_index = 0;
    int max_num = A[0];

    for (int i = 1; i < n; i++)
    //@loop_invariant 1 <= i && i <=n;
    {
        if (A[i] > max_num) {
            max_index = i;
            max_num = A[i];
        } 
    }
    return max_index;
}

/*
1. Give the line number(s) which guarantee that line 5 is safe
    Line 2 guarantees that A[0] is safe.

2. Give the line number(s) which guarantee that line 10 is safe.
    Line 10 is safe means that A[i] is safe for all i in the loop.
    Line 2,7,8 guarantee that A[i] is safe for all i in the loop.

3. Assume the 4-element array A contains the integer 5 in each position (pictorially, A is [5, 5, 5, 5]). 
   What will find_max(A,4) return?
    It will return 0, since the first occurrence of the maximum value (5) is at index 0.

4. Assume the 5-element array B contains the integers 1, 3, 2, 3 and 1 in this
   order (pictorially, B is [1, 3, 2, 3, 1]). What will find_max(B,5) return?'
    It will return 1, since the first occurrence of the maximum value (3) is at index 1.

5. This function has no postconditions, and therefore it is trivially correct.
    //@ensures 0 <= \result && \result < \length(A);
*/
