/*
Rewrite the body of the binary search
function so that both lower and upper bounds of the interval examined in the loop
are inclusive
*/
int search(int x, int[] A, int n)
//@requires n == \length(A);
//@requires is_sorted(A, 0, n);
//@ensures (\result == -1 && !is_in(x, A, 0, n)) || (0 <= \result && \result < n && A[\result] == x);
{
  int lo = 0;
  int hi = n-1;

  while (lo <= hi)
  //@loop_invariant 0 <= lo && lo <= hi+1 && hi < n;
  //@loop_invariant gt_seg(x, A, 0, lo);     // implies !is_in(x,A,0,lo)
  //@loop_invariant lt_seg(x, A, hi+1, n);     // implies !is_in(x,A,hi+1,n)
  {
    // int mid = lo;            // This is linear search!
    // int mid = (hi + lo)/2;   // Jon Bentley's bug!
    int mid = lo + (hi - lo)/2;
    //@assert lo <= mid && mid <= hi;

    if (A[mid] == x) return mid;
    if (A[mid] < x) {
      lo = mid+1;
    } 
    else { 
      //@assert A[mid] > x;
      hi = mid-1;
    }
  }
  //@assert lo == hi+1;
  //@assert !is_in(x,A,0,n);
  return -1;
}
