/*
 Exercise 3: Binary search that always finds the leftmost occurrence
 Demonstrating that standard binary search may not find leftmost occurrence,
 then implementing a version that always does.
*/

#use <conio>
#use "arrayutil.c0"

/*
Standard binary search may not find leftmost occurrence

Consider the array: [1, 3, 5, 5, 5, 7, 9]
 Searching for 5:
 
 Step 1: lo=0, hi=7, mid=3, A[3]=5 â†’ found at index 3 (not leftmost!)
 The leftmost occurrence is at index 2, but standard binary search returns index 3 because it stops as soon as it finds any occurrence.
*/

int search_standard(int x, int[] A, int n)
//@requires n == \length(A);
//@requires is_sorted(A, 0, n);
/*@ensures (\result == -1 && !is_in(x, A, 0, n))
        || (0 <= \result && \result < n && A[\result] == x); @*/
{
  int lo = 0;
  int hi = n;

  while (lo < hi)
  //@loop_invariant 0 <= lo && lo <= hi && hi <= n;
  //@loop_invariant gt_seg(x, A, 0, lo);
  //@loop_invariant lt_seg(x, A, hi, n);
  {
    int mid = lo + (hi - lo)/2;
    //@assert lo <= mid && mid < hi;

    if (A[mid] == x) return mid;  // Returns ANY occurrence, not necessarily leftmost
    if (A[mid] < x) {
      lo = mid+1;
    } else {
      hi = mid;
    }
  }
  return -1;
}

/*
LEFTMOST BINARY SEARCH

Key insight: Even when we find x at A[mid], we cannot stop immediately.
We must continue searching the left half to ensure we find the leftmost occurrence.

Strategy: When A[mid] == x, set hi = mid (not return mid) to continue searching in the left half [lo, mid).
*/

int search_leftmost(int x, int[] A, int n)
//@requires n == \length(A);
//@requires is_sorted(A, 0, n);
/*@ensures (\result == -1 && !is_in(x, A, 0, n))
        || (0 <= \result && \result < n && A[\result] == x && !is_in(x, A, 0, \result)); @*/  // leftmost condition
{
  int lo = 0;
  int hi = n;

  while (lo < hi)
  //@loop_invariant 0 <= lo && lo <= hi && hi <= n;
  //@loop_invariant gt_seg(x, A, 0, lo);           // x > A[0..lo)
  //@loop_invariant le_seg(x, A, hi, n);           // x <= A[hi..n)
  {
    int mid = lo + (hi - lo)/2;
    //@assert lo <= mid && mid < hi;

    if (A[mid] < x) {
      //@assert gt_seg(x, A, 0, mid+1);
      lo = mid + 1;
    } 
    else {
      // A[mid] >= x (includes both A[mid] == x and A[mid] > x cases)
      //@assert le_seg(x, A, mid, n);
      hi = mid;
    }
  }
  //@assert lo == hi;
  if (0 <= lo && lo < n && A[lo] == x) {
    return lo;  // Found leftmost occurrence
  } 
  else {
    return -1;  // Not found
  }
}

/*
 * HELPER FUNCTIONS FOR DEMONSTRATION
 */

// Create array helper
int[] create_demo_array() {
    int[] A = alloc_array(int, 7);
    A[0] = 1; A[1] = 3; A[2] = 5; A[3] = 5; 
    A[4] = 5; A[5] = 7; A[6] = 9;
    return A;
}

void print_array(int[] A, int n) {
    printf("[");
    for (int i = 0; i < n; i++) {
        printf("%d", A[i]);
        if (i < n - 1) printf(", ");
    }
    printf("]");
}

void demonstrate_difference() {
    printf("=== DEMONSTRATION: Standard vs Leftmost Binary Search ===\n\n");
    
    int[] A = create_demo_array();
    int n = 7;
    int target = 5;
    
    printf("Array: ");
    print_array(A, n);
    printf("\n");
    printf("Searching for: %d\n\n", target);
    
    // Show all positions where 5 occurs
    printf("All occurrences of %d: ", target);
    for (int i = 0; i < n; i++) {
        if (A[i] == target) {
            printf("index %d ", i);
        }
    }
    printf("\n");
    printf("Leftmost occurrence should be at index: 2\n\n");
    
    // Test standard binary search
    int standard_result = search_standard(target, A, n);
    printf("Standard binary search result: %d\n", standard_result);
    
    // Test leftmost binary search
    int leftmost_result = search_leftmost(target, A, n);
    printf("Leftmost binary search result: %d\n", leftmost_result);
    
    printf("\n");
    if (standard_result != leftmost_result) {
        printf("Demonstration successful: Standard search found index %d, but leftmost is %d\n", 
               standard_result, leftmost_result);
    } else {
        printf("Note: Both algorithms found the same index (this can happen depending on array layout)\n");
    }
}

void test_edge_cases() {
    printf("\n=== TESTING EDGE CASES FOR LEFTMOST SEARCH ===\n\n");
    
    // Test case 1: All elements are the same
    int[] A1 = alloc_array(int, 5);
    for (int i = 0; i < 5; i++) A1[i] = 7;
    
    printf("Test 1 - All same elements: ");
    print_array(A1, 5);
    printf("\n");
    
    int result1 = search_leftmost(7, A1, 5);
    printf("Searching for 7, leftmost result: %d (should be 0)\n", result1);
    assert(result1 == 0);
    printf("PASSED\n\n");
    
    // Test case 2: Target at beginning
    int[] A2 = alloc_array(int, 5);
    A2[0] = 1; A2[1] = 1; A2[2] = 3; A2[3] = 5; A2[4] = 7;
    
    printf("Test 2 - Target at beginning: ");
    print_array(A2, 5);
    printf("\n");
    
    int result2 = search_leftmost(1, A2, 5);
    printf("Searching for 1, leftmost result: %d (should be 0)\n", result2);
    assert(result2 == 0);
    printf("PASSED\n\n");
    
    // Test case 3: Target at end
    int[] A3 = alloc_array(int, 5);
    A3[0] = 1; A3[1] = 3; A3[2] = 5; A3[3] = 7; A3[4] = 7;
    
    printf("Test 3 - Target at end: ");
    print_array(A3, 5);
    printf("\n");
    
    int result3 = search_leftmost(7, A3, 5);
    printf("Searching for 7, leftmost result: %d (should be 3)\n", result3);
    assert(result3 == 3);
    printf("PASSED\n\n");
    
    // Test case 4: Target not found
    int result4 = search_leftmost(4, A3, 5);
    printf("Test 4 - Target not found: Searching for 4, result: %d (should be -1)\n", result4);
    assert(result4 == -1);
    printf("PASSED\n\n");
    
    // Test case 5: Single element
    int[] A5 = alloc_array(int, 1);
    A5[0] = 42;
    
    int result5a = search_leftmost(42, A5, 1);
    int result5b = search_leftmost(10, A5, 1);
    printf("Test 5 - Single element [42]: Searching for 42: %d, for 10: %d\n", result5a, result5b);
    assert(result5a == 0 && result5b == -1);
    printf("PASSED\n\n");
}

int main() {
    demonstrate_difference();
    test_edge_cases();
    
    printf("=== ALL TESTS COMPLETED SUCCESSFULLY ===\n");
    printf("\nKey differences in leftmost binary search:\n");
    printf("1. When A[mid] == x, we set hi = mid (continue left) instead of returning\n");
    printf("2. Loop invariant changes: ge_seg(x, A, hi, n) instead of lt_seg(x, A, hi, n)\n");
    printf("3. After loop, we check if A[lo] == x to confirm we found the target\n");
    printf("4. This guarantees we find the leftmost occurrence when duplicates exist\n");
    
    return 0;
}