#use <conio>
#use <string>
#use "../exercise_2.c0"

void test_copy_into() {
    // Test 1: Normal case with positive return value
    int[] src1 = alloc_array(int, 5);
    int[] tgt1 = alloc_array(int, 5);
    src1[0] = 1; src1[1] = 2; src1[2] = 3; src1[3] = 4; src1[4] = 5;
    int last_pos1 = copy_into(src1, 1, 3, tgt1, 0);
    assert(tgt1[0] == 2 && tgt1[1] == 3 && tgt1[2] == 4);
    assert(last_pos1 == 2);  // j(0) + n(3) - 1 = 2

    // Test 2: Edge case - zero elements (should return -1)
    int[] src2 = alloc_array(int, 3);
    int[] tgt2 = alloc_array(int, 3);
    src2[0] = 42;
    int last_pos2 = copy_into(src2, 0, 0, tgt2, 1);
    assert(last_pos2 == -1);

    // Test 3: Edge case - copy one element
    int[] src3 = alloc_array(int, 2);
    int[] tgt3 = alloc_array(int, 2);
    src3[1] = 99;
    int last_pos3 = copy_into(src3, 1, 1, tgt3, 0);
    assert(tgt3[0] == 99);
    assert(last_pos3 == 0);  // j(0) + n(1) - 1 = 0

    // Test 4: Copy to end of target array
    int[] src4 = alloc_array(int, 5);
    int[] tgt4 = alloc_array(int, 6);
    src4[2] = 7; src4[3] = 8; src4[4] = 9;
    int last_pos4 = copy_into(src4, 2, 3, tgt4, 3);
    assert(tgt4[3] == 7 && tgt4[4] == 8 && tgt4[5] == 9);
    assert(last_pos4 == 5);  // j(3) + n(3) - 1 = 5

    // Test 5: Special values test (INT_MAX, INT_MIN)
    int[] src5 = alloc_array(int, 3);
    int[] tgt5 = alloc_array(int, 3);
    src5[0] = 0x7FFFFFFF;  // INT_MAX
    src5[1] = 0x80000000;  // INT_MIN
    int last_pos5 = copy_into(src5, 0, 2, tgt5, 1);
    assert(tgt5[1] == 0x7FFFFFFF);
    assert(tgt5[2] == 0x80000000);
    assert(last_pos5 == 2);  // j(1) + n(2) - 1 = 2
}

// Function to test error cases (should be run separately as they should fail)
void test_error_cases()
//@requires false;
{
    int[] src = alloc_array(int, 5);
    int[] tgt = alloc_array(int, 5);
    
    // These should trigger contract violations:
    copy_into(src, -1, 2, tgt, 0);      // i < 0
    copy_into(src, 0, -1, tgt, 0);      // n < 0
    copy_into(src, 5, 1, tgt, 0);       // i >= \length(source)
    copy_into(src, 0, 6, tgt, 0);       // i + n > \length(source)
    copy_into(src, 0, 2, tgt, -1);      // j < 0
    copy_into(src, 0, 2, tgt, 5);       // j >= \length(target)
    copy_into(src, 0, 3, tgt, 3);       // j + n > \length(target)
}

int main() {
    test_copy_into();
    print("All tests passed!\n");
    return 0;
}