// Allows you to use I/O functions like printf
#use <conio>
// Allows you to use string functions like string_join
#use <string>
// Allows you to use utility functions like abs() and min()
#use <util>

bool is_substring(string little, string big) {
  int len = string_length(little);
  int offset = string_length(big) - len;
  while (offset >= 0)
  //@loop_invariant offset <= string_length(big) - string_length(little);
  {
    if (string_equal(little, string_sub(big, offset, offset+len)))
      return true;
    offset--;
  }
  return false;
}

int f(string s1, string s2)
//@ensures 0 <= \result && \result <= string_length(s1);
//@ensures 0 <= \result && \result <= string_length(s2);
//@ensures string_equal(string_sub(s1, 0, \result), string_sub(s2, 0, \result));
/*@ensures \result == string_length(s1)
        || \result == string_length(s2)
        || string_charat(s1, \result) != string_charat(s2, \result); @*/
{
  int len1 = string_length(s1);
  int len2 = string_length(s2);
  int min_len = min(len1, len2);
  for (int i = 0; i < min_len; i++)
  //@loop_invariant 0 <= i && i <= min_len;
  //@loop_invariant string_equal(string_sub(s1, 0, i), string_sub(s2, 0, i));
  {
    if (string_charat(s1, i) != string_charat(s2, i))
    {
      return i;
    } 
  }
  return min_len;
}

int g(string s)
//@requires string_length(s) > 0;
//@requires string_charat(s, 0) != string_charat(s, string_length(s) - 1);
//@ensures 0 <= \result && \result < string_length(s)-1;
//@ensures string_charat(s, \result) == string_charat(s, 0);
//@ensures string_charat(s, \result+1) != string_charat(s, 0);
{
  int len = string_length(s);
  for (int i = 1; i < len - 1; i++)
  //@loop_invariant  1 <= i && i <= len-1;
  {
    if (string_charat(s, i) == string_charat(s, 0) 
    &&  string_charat(s, i+1) != string_charat(s, 0))
    {
        return i;
    }
  }
  return 0;
}

string h(string s)
//@ensures is_substring(\result, s);
/*@ensures string_length(s) < 128
        || (string_length(\result) > 1
            && string_charat(\result, 0)
               == string_charat(\result, string_length(\result) - 1)); @*/
{
  int len = string_length(s);
  if (len >= 128) 
  {
    int last_char_index = len - 1;
    for (int i = 0; i < len - 1; i++)
    //@loop_invariant 0 <= i && i <= len - 1;
    {
      for (int j = i + 1; j < len; j++)
      //@loop_invariant i < j && j <= len;
      {
        if (string_charat(s, i) == string_charat(s, j)) {
          return string_sub(s, i, j+1);
        }
      }
    }
  }
  return "";
}




/**************** DO NOT CHANGE THE CODE BELOW THIS LINE ********************/

int f(string s1, string s2)
/*@ensures 0 <= \result && \result <= string_length(s1);                   @*/
/*@ensures 0 <= \result && \result <= string_length(s2);                   @*/
/*@ensures string_equal(string_sub(s1, 0, \result),
                        string_sub(s2, 0, \result));                       @*/
/*@ensures \result == string_length(s1)
        || \result == string_length(s2)
        || string_charat(s1, \result) != string_charat(s2, \result);       @*/ ;

int g(string s)
/*@requires string_length(s) > 0;                                          @*/
/*@requires string_charat(s, 0) != string_charat(s, string_length(s) - 1); @*/
/*@ensures 0 <= \result && \result < string_length(s)-1;                   @*/
/*@ensures string_charat(s, \result) == string_charat(s, 0);               @*/
/*@ensures string_charat(s, \result+1) != string_charat(s, 0);             @*/ ;

string h(string s)
/*@ensures is_substring(\result, s);                                       @*/
/*@ensures string_length(s) < 128
        || (string_length(\result) > 1
           && string_charat(\result, 0)
               == string_charat(\result, string_length(\result) - 1));     @*/ ;
